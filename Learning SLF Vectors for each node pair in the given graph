W_out_p = np.matrix(np.zeros((max_node_id + 1, dimensions)), dtype=np.float32)
W_in_p = np.matrix(np.zeros((max_node_id + 1, dimensions)), dtype=np.float32)
W_out_n = np.matrix(np.zeros((max_node_id + 1, dimensions)), dtype=np.float32)
W_in_n = np.matrix(np.zeros((max_node_id + 1, dimensions)), dtype=np.float32)

for i in nodes:
    for j in range(dimensions):
        W_out_p[i, j] = rd.uniform(0, 1)
        W_in_p[i, j] = rd.uniform(0, 1)
        W_out_n[i, j] = rd.uniform(0, 1)
        W_in_n[i, j] = rd.uniform(0, 1)

start = time.time()
for count in range(max_iterations):
    learning_rate = learning_rate_init * (max_iterations - count) / max_iterations
    for u in nodes:
        out_p_vec = np.zeros((1, dimensions))
        out_n_vec = np.zeros((1, dimensions))
        in_p_vec = np.zeros((1, dimensions))
        in_n_vec = np.zeros((1, dimensions))

        succs = G.successors(u)
        for succ in succs:
            e_p = fa(W_out_p[u] @ W_in_p[succ].T)
            e_n = fa(W_out_n[u] @ W_in_n[succ].T)
            if G[u][succ]['weight'] == 1:
                out_p_vec += (1 - e_p) * W_in_p[succ]
                out_n_vec -= e_n * W_in_n[succ]
            elif G[u][succ]['weight'] == -1:
                out_p_vec -= e_p * W_in_p[succ]
                out_n_vec += (1 - e_n) * W_in_n[succ]
            elif G[u][succ]['weight'] == 0:
                out_p_vec += (1 - e_p) * W_in_p[succ]
                out_n_vec += (1 - e_n) * W_in_n[succ]
        for i in range(noise_size):
            noise = rd.choice(nodes)
            while noise in succs:
                noise = rd.choice(nodes)
            e_p = fa(W_out_p[u] @ W_in_p[noise].T)
            e_n = fa(W_out_n[u] @ W_in_n[noise].T)
            out_p_vec -= e_p * W_in_p[noise]
            out_n_vec -= e_n * W_in_n[noise]
            
        pres = G.predecessors(u)
        for pre in pres:
            e_p = fa(W_out_p[pre] @ W_in_p[u].T)
            e_n = fa(W_out_n[pre] @ W_in_n[u].T)
            if G[pre][u]['weight'] == 1:
                in_p_vec += (1 - e_p) * W_out_p[pre]
                in_n_vec -= e_n * W_out_n[pre]
            elif G[pre][u]['weight'] == -1:
                in_p_vec -= e_p * W_out_p[pre]
                in_n_vec += (1 - e_n) * W_out_n[pre]
            elif G[pre][u]['weight'] == 0:
                in_p_vec += (1 - e_p) * W_out_p[pre]
                in_n_vec += (1 - e_n) * W_out_n[pre]
        for i in range(noise_size):
            noise = rd.choice(nodes)
            while noise in pres:
                noise = rd.choice(nodes)
            e_p = fa(W_out_p[noise] @ W_in_p[u].T)
            e_n = fa(W_out_n[noise] @ W_in_n[u].T)
            in_p_vec -= e_p * W_out_p[noise]
            in_n_vec -= e_n * W_out_n[noise]

        W_out_p[u] += learning_rate * out_p_vec
        W_in_p[u] += learning_rate * in_p_vec
        W_out_n[u] += learning_rate * out_n_vec
        W_in_n[u] += learning_rate * in_n_vec

        # Set the negative elements of U(out,u) , U(in,u) ,W(out,u) and W(in,u) to 0.
        for i in range(dimensions):
            if W_out_p[u, i] < 0:
                W_out_p[u, i] = 0
            if W_in_p[u, i] < 0:
                W_in_p[u, i] = 0
            if W_out_n[u, i] < 0:
                W_out_n[u, i] = 0
            if W_in_n[u, i] < 0:
                W_in_n[u, i] = 0

    end = time.time()
    print('count' + str(count) + ' : ' + str(round(end - start, 1)) + 's')
